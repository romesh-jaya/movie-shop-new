import type { NextPage } from 'next'
import Head from 'next/head'
import React, { useCallback, useEffect, useState } from 'react'
import Header from '../../../components/header'
import styles from '../../../styles/Pages.module.scss'
import { useRouter } from 'next/router'
import MovieDetail from '../../../components/movie-detail'
import { titleBase } from '../../../constants/appConstants'
import { useLazyQuery } from '@apollo/client'
import { getTitleDetails } from '../../../queries'
import SpinnerFixedHeight from '../../../components/spinner-fixed-height'

const TitlePage: NextPage = () => {
  const router = useRouter()
  const { id } = router.query
  const [queryExecuted, setQueryExecuted] = useState(false)
  const [getDetails, { loading, error, data }] = useLazyQuery(getTitleDetails)
  const movieFetched = data && data.movie.length > 0 && data.movie[0]
  const title =
    movieFetched && movieFetched.title
      ? titleBase + ' - ' + movieFetched.title
      : titleBase

  const extractIMDBID = useCallback(() => {
    if (id) {
      const idString = id as string
      const firstDashIndex = idString.indexOf('-')
      const iMDBID = idString.substring(0, firstDashIndex)

      getDetails({
        variables: {
          imdbID: iMDBID,
        },
      })
      setQueryExecuted(true)
    }
  }, [getDetails, id])

  useEffect(() => {
    extractIMDBID()
  }, [extractIMDBID])

  return (
    <div className={styles.container}>
      <Head>
        <title>{title}</title>
        <meta name='description' content='Generated by create next app' />
      </Head>
      <Header />
      <div className={`${styles.content} ${styles['column-direction']}`}>
        <div className={styles['back-button-row']}>
          <div className={styles['back-button']} onClick={() => router.back()}>
            &#60;BACK
          </div>
        </div>
        {loading && <SpinnerFixedHeight />}
        {error && <p>Error occured while loading title details</p>}
        {!loading && !error && !movieFetched && queryExecuted && (
          <p>Specified Title doesn&#39;t exist on the database</p>
        )}
        {!loading && !error && movieFetched && (
          <MovieDetail movie={movieFetched} />
        )}
      </div>
    </div>
  )
}

export default TitlePage
