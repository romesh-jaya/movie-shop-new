import type { NextPage } from 'next'
import Head from 'next/head'
import React, { useCallback, useEffect, useState } from 'react'
import Header from '../../components/header'
import styles from '../../styles/Pages.module.scss'
import dynamic from 'next/dynamic'
import { MovieInfo } from '../../types/MovieInfo'
import { useRouter } from 'next/router'
import { titleBase } from '../../constants/appConstants'
import Query from '../../components/query'
import { MovieType } from '../../enums/MovieType'
import { useLazyQuery } from '@apollo/client'
import { getTitlesByKeyword, getTitlesByType } from '../../queries'
import Spinner from '../../components/spinner'

// make this dynamic, so that the images are loaded dynamically and not via SSR,
// which causes problems
const SearchResults = dynamic(() => import('../../components/search-results'), {
  ssr: false,
})

const Home: NextPage = () => {
  const router = useRouter()
  const { keyword, type } = router.query
  const [queryExecuted, setQueryExecuted] = useState(false)
  // Note: we store the keyword and type in state to avoid race conditions
  const [queryKeyword, setQueryKeyword] = useState('')
  const [queryType, setQueryType] = useState('')
  const [
    getTitlesByKeywordExec,
    { loading: loadingKeyword, error: errorKeyword, data: dataForKeyword },
  ] = useLazyQuery(getTitlesByKeyword)
  const [
    getTitlesByTypeExec,
    { loading: loadingType, error: errorType, data: dataForType },
  ] = useLazyQuery(getTitlesByType)
  const movies: MovieInfo[] =
    dataForType && dataForType.movie.length > 0
      ? dataForType.movie
      : dataForKeyword && dataForKeyword.movie.length > 0
      ? dataForKeyword.movie
      : []
  const resultForText = queryKeyword
    ? 'Result for: ' + queryKeyword
    : queryType
    ? `Filter ${queryType === MovieType.Movie ? 'movies' : 'TV series'}`
    : ''
  const title =
    queryKeyword || queryType ? titleBase + ' - ' + resultForText : ''

  const executeQuery = useCallback(
    (queryKeywordInt: string, queryTypeInt: string) => {
      if (!queryKeywordInt && !queryTypeInt) {
        return
      }

      if (queryKeywordInt) {
        const queryString = queryKeywordInt
        getTitlesByKeywordExec({
          variables: {
            titleSearch: `%${queryString}%`,
          },
        })
      }

      if (queryTypeInt) {
        getTitlesByTypeExec({
          variables: {
            type: queryTypeInt,
          },
        })
      }

      setQueryExecuted(true)
    },
    [getTitlesByKeywordExec, getTitlesByTypeExec]
  )

  useEffect(() => {
    executeQuery(queryKeyword, queryType)
  }, [executeQuery, queryKeyword, queryType])

  useEffect(() => {
    if (keyword) {
      setQueryKeyword(keyword as string)
      setQueryType('')
    } else if (type) {
      setQueryKeyword('')
      setQueryType(type as string)
    }
  }, [keyword, type])

  const renderSearchResults = () => {
    if (!queryExecuted || loadingKeyword || loadingType) {
      return null
    }

    if (queryKeyword && movies.length === 0) {
      return (
        <p className={styles['no-results']}>
          No results found. Try searching for a different keyword
        </p>
      )
    }

    if (queryType && movies.length === 0) {
      return <p className={styles['no-results']}>No results found</p>
    }

    return <SearchResults movies={movies} />
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>{title}</title>
        <meta name='description' content='Generated by create next app' />
      </Head>
      <Header />
      <div className={`${styles.content} ${styles['column-direction']}`}>
        <div className={styles['query-mobile']}>
          <Query />
        </div>
        <div className={styles['title-row']}>
          <div className={styles.title}>{resultForText}</div>
          <div className={styles['back-button']} onClick={() => router.back()}>
            &#60;BACK
          </div>
        </div>
        {(loadingKeyword || loadingType) && <Spinner />}
        {(errorKeyword || errorType) && (
          <p>Error occured while fetching titles</p>
        )}
        {renderSearchResults()}
      </div>
    </div>
  )
}

export default Home
